#!/usr/bin/env python3

import os
import pathlib
import re
import socket
import subprocess
import sys

import click

DIR = pathlib.Path(__file__).parent.absolute()

KUBECTL = os.path.expandvars("$SNAP/microk8s-kubectl.wrapper")
MICROK8S_STATUS = os.path.expandvars("$SNAP/microk8s-status.wrapper")


def ensure_hugepages_enabled():
    click.echo("Checking for HugePages (>= 1024)...")
    enabled = False
    try:
        with open("/proc/meminfo") as fin:
            match = re.findall(r"HugePages_Total:[\s\t]*(\d+)", fin.read())

        nr_hugepages = int(match[0])
        enabled = nr_hugepages >= 1024
    except (OSError, IndexError, ValueError):
        pass

    if not enabled:
        click.echo(
            """
HugePages are not available or enabled. Please make sure HugePages are enabled.

To enable HugePages (mayastor requires at least 1024):

    echo vm.nr_hugepages = 1024 | sudo tee -a /etc/sysctl.d/20-microk8s-hugepages.conf

Please restart your system after enablement.
""",
            err=True,
        )
        sys.exit(1)

    click.echo("Checking for HugePages (>= 1024)... OK")


def ensure_kernel_required_modules():
    click.echo("Checking for nvme_tcp module...")
    output = subprocess.check_output(["lsmod"]).decode()
    if "nvme_tcp" not in output:
        click.echo(
            """
Kernel module 'nvme_tcp' is missing or not loaded. For Ubuntu, enable with:

    sudo apt-get install linux-modules-extra-$(uname -r)
    sudo modprobe nvme-tcp
    echo 'nvme-tcp' | sudo tee -a /etc/modules-load.d/microk8s-mayastor.conf

Note that the 'nvme_tcp' module is needed in all cluster nodes.
""",
            err=True,
        )
        sys.exit(1)

    click.echo("Checking for nvme_tcp module... OK")


def ensure_dns():
    click.echo("Checking for DNS...")
    output = subprocess.check_output([MICROK8S_STATUS, "-a", "dns"]).decode()
    if "enabled" not in output:
        click.echo(
            """
DNS addon is not enabled. Please enable with:

    microk8s enable dns
""",
            err=True,
        )
        sys.exit(1)

    click.echo("Checking for DNS... OK")


@click.command()
@click.option("--skip-hugepages-check", is_flag=True, default=False)
@click.option("--skip-kernel-check", is_flag=True, default=False)
@click.option("--skip-dns-check", is_flag=True, default=False)
@click.option("--create-storage-classes", is_flag=True, default=True)
@click.option("--create-pool", is_flag=True, default=True)
@click.option("--create-pool-size", default='10G')
def main(
    skip_hugepages_check: bool,
    skip_kernel_check: bool,
    skip_dns_check: bool,
    create_storage_classes: bool,
    create_pool: bool,
    create_pool_size: str,
):
    if not skip_hugepages_check:
        ensure_hugepages_enabled()

    if not skip_kernel_check:
        ensure_kernel_required_modules()

    if not skip_dns_check:
        ensure_dns()

    # Create mayastor namespace. Ignore failures (e.g. if namespace exists)
    subprocess.run([KUBECTL, "create", "namespace", "mayastor"])

    manifests = [
        # Deploy CRDs and RBAC rules for mayastor
        DIR / "operator-rbac.yaml",
        DIR / "mayastorpool-crd.yaml",
        DIR / "etcd-cluster-crd.yaml",
        # Deploy etcd and nats.io
        DIR / "etcd-operator-rbac.yaml",
        DIR / "etcd-operator-deployment.yaml",
        DIR / "etcd-cluster.yaml",
        DIR / "nats-deployment.yaml",
        # Mayastor Control Plane
        DIR / "csi-daemonset.yaml",
        DIR / "core-agents-deployment.yaml",
        DIR / "rest-deployment.yaml",
        DIR / "rest-service.yaml",
        DIR / "csi-deployment.yaml",
        DIR / "msp-deployment.yaml",
        DIR / "mayastor-daemonset.yaml",
    ]

    if create_storage_classes:
        manifests.extend(
            [
                DIR / "mayastor-1-sc.yaml",
                DIR / "mayastor-3-sc.yaml",
            ]
        )

    for manifest in manifests:
        subprocess.check_call([KUBECTL, "apply", "-f", manifest])

    if not create_storage_classes:
        click.echo("No storage classes have been created, please configure manually")

    if create_pool:
        click.echo("Creating default pool with size {}".format(create_pool_size))
        subprocess.check_call([DIR / "pools.py", "add", "--size", create_pool_size])
    else:
        click.echo("No storage pools have been created, please configure manually")

    click.echo(f"""
Mayastor has been installed and will be available shortly.

To manage mayastorpools, you can use the following commands:

Create a pool using an image file with 10G maximum size:

    {DIR / 'pools.py'} add --node {socket.gethostname()} --size 10G

Create a pool using an existing block device:

    {DIR / 'pools.py'} add --node {socket.gethostname()} --device /dev/vdb

Delete a pool:

    {DIR / 'pools.py'} remove pool-{socket.gethostname()}-0.img
    {DIR / 'pools.py'} remove pool-{socket.gethostname()}-0.img --purge --force

Mayastor will run for all nodes in your MicroK8s cluster by default. You can
remove mayastor from any node using the 'microk8s.io/mayastor=disable'.
For example:
    microk8s label node {socket.gethostname()} microk8s.io/mayastor=disable
""")


if __name__ == "__main__":
    main()
