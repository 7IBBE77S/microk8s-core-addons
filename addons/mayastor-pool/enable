#!/usr/bin/env python3

from copy import deepcopy
import glob
import os
import pathlib
import socket
import subprocess

import click
import yaml

DIR = pathlib.Path(__file__).parent.absolute()
KUBECTL = os.path.expandvars("$SNAP/microk8s-kubectl.wrapper")
MAYASTOR_DATA = pathlib.Path(os.path.expandvars("$SNAP_COMMON/mayastor/data"))


def format_pool(pool_template: dict, node: str, device: str):
    # drop any paths from the device
    device_name = pathlib.Path(device).name

    pool = deepcopy(pool_template)
    pool["metadata"]["name"] = "pool-{}-{}".format(node, device_name)
    pool["spec"]["node"] = node
    pool["spec"]["disks"] = [device]

    return yaml.dump(pool)


@click.command()
@click.option("--device", multiple=True)
@click.option("--create", multiple=True)
@click.option("--node", default=socket.gethostname())
def main(device: list, create: list, node: str):
    if node != socket.gethostname():
        click.echo(
            "ERROR: Creating mayastor pools in other nodes is not supported yet",
            err=True,
        )
        return 1

    with open(DIR / "mayastorpool-pool.yaml") as fin:
        pool_template = yaml.safe_load(fin)

    for dev in device:
        subprocess.run(
            [KUBECTL, "apply", "-f", "-"], input=format_pool(pool_template, node, dev)
        )

    next_create = len(glob.glob(str(MAYASTOR_DATA / "*.img"))) + 1
    for size in create:
        next_create += 1
        dev = MAYASTOR_DATA / "{}.img".format(next_create)
        subprocess.run(["sudo", "truncate", "-s", str(size), dev])
        subprocess.run(
            [KUBECTL, "apply", "-f", "-"], input=format_pool(pool_template, node, dev)
        )


if __name__ == "__main__":
    main()
