#!/usr/bin/env python3

import os
import pathlib
import subprocess

import click

SNAP = pathlib.Path(os.getenv("SNAP"))
SNAP_DATA = pathlib.Path(os.getenv("SNAP_DATA"))
KUBECTL = SNAP / "microk8s-kubectl.wrapper"

def download_source_repo(destination_dir, version):
    """
    Download source code artifact to a destination directory.

    :param destination_dir: The destination directory.
    :param version: The version of the source code artifact.
    """
    click.echo(f"Downloading rook version {version} in {destination_dir}")
    try:
        # Download the repo in a temp directory.
        temp_dir = str(SNAP_DATA) + "/tmp"
        os.makedirs(temp_dir, exist_ok=True)
        subprocess.call("curl -sL -o {}/rook.tar.gz https://github.com/rook/rook/archive/refs/tags/{}.tar.gz".format(temp_dir, version).split())

        subprocess.call("tar -xzf {}/rook.tar.gz --one-top-level={} --strip-components=1".format(temp_dir, destination_dir).split())

        os.remove("{}/rook.tar.gz".format(temp_dir))
    except subprocess.CalledProcessError as e:
        click.echo(f"Failed to download repo: {e}", err=True)
        exit(4)


def update_manifest(file_path):
    """
    Change the path in a manifest file from old_path to new_path.

    :param file_path: The path to the manifest file.
    """
    old_path = "/var/lib/kubelet"
    new_path = "/var/snap/microk8s/common/var/lib/kubelet"
    click.echo(f"Updating {file_path} to use {new_path} instead of {old_path}")
    try:
        with open(file_path, "r+") as file:
            content = file.read()
            content = content.replace(old_path, new_path)
            file.seek(0)
            file.write(content)
            file.truncate()
    except (OSError, IndexError, ValueError) as e:
        click.echo(f"Failed to update operator.yaml: {e}", err=True)
        exit(4)


@click.command()
@click.option("--rook-version", default="v1.11.3")
def main(rook_version: str):
    destination_dir = str(SNAP_DATA) + "/tmp/rook"
    example_manifest_dir = destination_dir + "/deploy/examples/"
    operator_manifest = example_manifest_dir + "operator.yaml"
    crds_manifest = example_manifest_dir + "crds.yaml"
    common_manifest = example_manifest_dir + "common.yaml"

    # Download the rook-ceph repository
    download_source_repo(destination_dir, rook_version)

    # Update the operator manifest to use the correct path for the kubelet
    update_manifest(operator_manifest)

    # Create the CRDs, common and operator
    subprocess.run([KUBECTL, "create", "-f", crds_manifest, "-f", common_manifest, "-f", operator_manifest])

    click.echo(
        f"""
============================================================

INFO: Rook Ceph is now enabled.

Rook provides `create-external-cluster-resources.py` and `import-external-cluster.sh` 
scripts to create all the necessary resources for an external cluster.
If you want to use an external Ceph cluster, please follow the instructions below:

# Go to the rook examples directory
$ cd /var/snap/microk8s/current/tmp/rook/deploy/examples

# deploy rbac rules
$ microk8s.kubectl create -f common-external.yaml

# create and initialize an rbd pool
$ ceph osd pool create rbd0
$ rbd pool init rbd0

# assuming ceph config file and user is available, creates all ceph clients and configurations
$ ./create-external-cluster-resources.py --format bash --output config.rc

# source configuration and deploy cluster resources
$ . config.rc
$ . ./import-external-cluster.sh

# create external cluster resource, will pick up the configs/secrets deployed previously
$ microk8s.kubectl create -f cluster-external.yaml
=============================================================
"""
    )


if __name__ == "__main__":
    main()
